{"version":3,"sources":["ng://ng-feedback/lib/entity/feedback.ts","ng://ng-feedback/lib/entity/rectangle.ts","ng://ng-feedback/lib/feedback.service.ts","ng://ng-feedback/lib/feedback-dialog/feedback-dialog.component.ts","ng://ng-feedback/lib/feedback-toolbar/feedback-toolbar.component.ts","ng://ng-feedback/lib/feedback-rectangle/feedback-rectangle.component.ts","ng://ng-feedback/lib/feedback.directive.ts","ng://ng-feedback/lib/feedback.module.ts"],"names":["Feedback","Rectangle","this","windowScrollY","window","scrollY","windowScrollX","scrollX","FeedbackService","initialVariables","highlightedColor","hiddenColor","screenshotCanvasSource","Subject","screenshotCanvas$","asObservable","feedbackSource","feedback$","isDraggingToolbarSource","isDraggingToolbar$","prototype","initScreenshotCanvas","_this","body","document","html2canvas","logging","width","documentElement","clientWidth","height","clientHeight","x","scrollLeft","y","scrollTop","allowTaint","useCORS","then","bodyCanvas","next","setCanvas","canvas","setFeedback","feedback","setIsDraggingToolbar","isDragging","getImgEle","img","toDataURL","imageEle","createElement","setAttribute","Object","assign","style","position","top","right","left","margin","maxHeight","maxWidth","transform","hideBackDrop","getElementsByClassName","backgroundColor","showBackDrop","dialogBackDrop","getAttribute","Injectable","FeedbackDialogComponent","dialogRef","feedbackService","detector","el","showToolbar","vars","includeScreenshot","showSpinner","showToolbarTips","drawColor","rectangles","scrollWidth","scrollHeight","elCouldBeHighlighted","isDrawingRect","description","ngAfterViewInit","subscribe","screenshot","screenshotEle","appendScreenshot","destroyCanvasListeners","addCanvasListeners","afterClosed","sendNow","expandDrawingBoard","drawCanvas","detectChanges","initBackgroundCanvas","nativeElement","appendChild","console","log","onEscapeKeyDownHandler","evt","close","manipulate","manipulation","startDraw","color","isIncludeScreenshot","screenshotParent","getElementById","drawContainerRect","drawContext","getContext","beginPath","fillStyle","clearRect","fillRect","drawRectangle","rect","context","lineJoin","startX","startY","lineWidth","strokeStyle","stroke","forEach","tmpRect","mouseUp","fromEvent","mouseMove","mouseDown","scroll","manuallyDrawRect","autoDrawRect","changeRectPosition","event","currentWindowScrollX","currentWindowScrollY","drawPersistCanvasRectangles","error","manuallyDrawRect$","unsubscribe","autoDrawRect$","mouseDrag","pipe","mergeMap","mouseDownEvent","newRectangle","clientX","clientY","map","mouseMoveEvent","finalize","undefined","drawTempCanvasRectangle","push","Math","abs","takeUntil","rec","err","rectangle","els","elementsFromPoint","isExcludeRect","indexOf","nodeName","toLowerCase","getBoundingClientRect","cursor","closeRect","index","splice","elements","some","Component","args","selector","template","MatDialogRef","ChangeDetectorRef","ElementRef","ViewChild","static","HostListener","FeedbackToolbarComponent","EventEmitter","disableToolbarTips","isSwitch","elStyle","addDragListenerOnMoveBtn","ngOnChanges","done","emit","toggleHighlight","toggleHide","toggleMoveBtn","md","offsetX","offsetY","mm","preventDefault","pos","Input","Output","FeedbackRectangleComponent","showCloseTag","onMouseEnter","noHover","onMouseLeave","onClose","FeedbackDirective","overlay","title","placeholder","editTip","checkboxLabel","cancelLabel","sendLabel","moveToolbarTip","drawRectTip","highlightTip","hideTip","editDoneLabel","send","onClick","openFeedbackDialog","open","panelClass","backdropClass","disableClose","scrollStrategy","scrollStrategies","reposition","ngOnInit","Directive","MatDialog","Overlay","FeedbackModule","NgModule","declarations","imports","MatDialogModule","MatButtonModule","MatIconModule","MatInputModule","MatTooltipModule","CommonModule","FormsModule","MatCheckboxModule","MatProgressSpinnerModule","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["export class Feedback {\n  public description: string;\n  public screenshot: string;\n}\n","export class Rectangle {\n  public startX: number;\n  public startY: number;\n  public width: number;\n  public height: number;\n  public color: string;\n  public windowScrollY: number = window.scrollY;\n  public windowScrollX: number = window.scrollX;\n}\n","import { Injectable } from '@angular/core';\nimport html2canvas from 'html2canvas';\nimport { Subject, Observable } from 'rxjs';\nimport { Feedback } from './entity/feedback';\n\n@Injectable()\nexport class FeedbackService {\n  public initialVariables: object = {};\n  public highlightedColor = 'yellow';\n  public hiddenColor = 'black';\n  private screenshotCanvasSource = new Subject<HTMLCanvasElement>();\n  public screenshotCanvas$: Observable<HTMLCanvasElement> = this.screenshotCanvasSource.asObservable();\n\n  private feedbackSource = new Subject<Feedback>();\n  public feedback$: Observable<Feedback> = this.feedbackSource.asObservable();\n\n  private isDraggingToolbarSource = new Subject<boolean>();\n  public isDraggingToolbar$: Observable<boolean> = this.isDraggingToolbarSource.asObservable();\n\n  public initScreenshotCanvas() {\n    const body = document.body;\n    html2canvas(body, {\n      logging: false,\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight,\n      x: document.documentElement.scrollLeft,\n      y: document.documentElement.scrollTop,\n      allowTaint : true,\n      useCORS: true\n    }).then(bodyCanvas => {\n      this.screenshotCanvasSource.next(bodyCanvas);\n    });\n  }\n\n  public setCanvas(canvas: HTMLCanvasElement): void {\n    this.screenshotCanvasSource.next(canvas);\n  }\n\n  public setFeedback(feedback: Feedback): void {\n    this.feedbackSource.next(feedback);\n  }\n\n  public setIsDraggingToolbar(isDragging: boolean): void {\n    this.isDraggingToolbarSource.next(isDragging);\n  }\n\n  public getImgEle(canvas): HTMLElement {\n    const img = canvas.toDataURL('image/png'),\n          imageEle = document.createElement('img');\n    imageEle.setAttribute('src', img);\n    Object.assign(imageEle.style, {\n      position: 'absolute',\n      top: '50%',\n      right: '0',\n      left: '0',\n      margin: '0 auto',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      transform: 'translateY(-50%)'\n    });\n    return imageEle;\n  }\n\n  public hideBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    dialogBackDrop.style.backgroundColor = 'initial';\n  }\n\n  public showBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    if (!dialogBackDrop.getAttribute('data-html2canvas-ignore')) {\n      dialogBackDrop.setAttribute('data-html2canvas-ignore', 'true');\n    }\n    dialogBackDrop.style.backgroundColor = 'rgba(0, 0, 0, .288)';\n  }\n}\n","import { Component, AfterViewInit, ViewChild, ElementRef, ChangeDetectorRef, HostListener } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Feedback } from '../entity/feedback';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-dialog',\n  templateUrl: './feedback-dialog.component.html',\n  styleUrls: ['./feedback-dialog.component.css']\n})\nexport class FeedbackDialogComponent implements AfterViewInit {\n  public showToolbar = false;\n  public vars: object = {};\n  public feedback = new Feedback();\n  public includeScreenshot: boolean = true;\n  public showSpinner = true;\n  public screenshotEle: HTMLElement;\n  public drawCanvas: HTMLCanvasElement;\n  public showToolbarTips: boolean = true;\n  @ViewChild('screenshotParent', { static: false })\n  public screenshotParent: ElementRef;\n  public drawColor: string = this.feedbackService.highlightedColor;\n  public rectangles: Rectangle[] = [];\n  private scrollWidth = document.documentElement.scrollWidth;\n  private scrollHeight = document.documentElement.scrollHeight;\n  private elCouldBeHighlighted = ['button', 'a', 'span', 'em', 'i', 'h1', 'h2', 'h3', 'h4',\n    'h5', 'h6', 'p', 'strong', 'small', 'sub', 'sup', 'b', 'time', 'img',\n    'video', 'input', 'label', 'select', 'textarea', 'article', 'summary', 'section'];\n  // the flag field 'isManuallyDrawRect' to solve conflict between manually draw and auto draw\n  private manuallyDrawRect$: Subscription;\n  private autoDrawRect$: Subscription;\n  public isDrawingRect: boolean = false;\n\n  constructor(public dialogRef: MatDialogRef<FeedbackDialogComponent>,\n              private feedbackService: FeedbackService,\n              private detector: ChangeDetectorRef,\n              private el: ElementRef) {\n    this.feedback = new Feedback();\n    this.feedback.description = '';\n    this.vars = this.feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    this.feedbackService.screenshotCanvas$.subscribe((canvas) => {\n      this.showSpinner = false;\n      this.feedback.screenshot = canvas.toDataURL('image/png');\n      this.screenshotEle = this.feedbackService.getImgEle(canvas);\n      this.appendScreenshot();\n    });\n\n    this.feedbackService.isDraggingToolbar$.subscribe((isDragging) => {\n      if (isDragging) {\n        this.destroyCanvasListeners();\n      } else {\n        this.addCanvasListeners();\n      }\n    });\n\n    this.dialogRef.afterClosed().subscribe((sendNow) => {\n      if (sendNow === true) {\n        this.feedbackService.setFeedback(this.feedback);\n      }\n    });\n    this.feedbackService.showBackDrop();\n  }\n\n  public expandDrawingBoard() {\n    this.showToolbar = true;\n    if (!this.drawCanvas) {\n      this.detector.detectChanges();\n      this.initBackgroundCanvas();\n      this.feedbackService.hideBackDrop();\n    }\n    this.addCanvasListeners();\n    this.el.nativeElement.appendChild(this.drawCanvas);\n    this.feedbackService.hideBackDrop();\n    console.log('expand the board');\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  public onEscapeKeyDownHandler(evt: KeyboardEvent) {\n    this.showToolbar = false;\n    this.includeScreenshot = true;\n    this.detector.detectChanges();\n    this.dialogRef.close('key down esc to close');\n  }\n\n  public manipulate(manipulation: string) {\n    if (manipulation === 'done') {\n      this.showToolbarTips = false;\n      this.showSpinner = true;\n      this.destroyCanvasListeners();\n      this.showToolbar = false;\n      this.detector.detectChanges();\n      this.feedbackService.initScreenshotCanvas();\n    } else {\n      this.startDraw(manipulation);\n    }\n  }\n\n  public startDraw(color: string) {\n    this.drawColor = color;\n  }\n\n  public isIncludeScreenshot() {\n    if (this.includeScreenshot) {\n      this.detector.detectChanges();\n      this.showSpinner = false;\n      this.appendScreenshot();\n      this.feedback.screenshot = this.screenshotEle.getAttribute('src');\n    } else {\n      delete this.feedback['screenshot'];\n      this.showSpinner = true;\n    }\n  }\n\n  private appendScreenshot() {\n    if (this.screenshotParent) { this.screenshotParent.nativeElement.appendChild(this.screenshotEle); }\n  }\n\n  private initBackgroundCanvas() {\n    this.drawCanvas = document.getElementById('draw-canvas') as HTMLCanvasElement;\n    // The canvas to draw, must use this way to initial the height and width\n    this.drawCanvas.style.height = this.scrollHeight + '';\n    this.drawCanvas.style.width = this.scrollWidth + '';\n    this.drawCanvas.height = this.scrollHeight;\n    this.drawCanvas.width = this.scrollWidth;\n    this.drawContainerRect();\n  }\n\n  private drawContainerRect() {\n    const drawContext = this.drawCanvas.getContext('2d'),\n      width = this.scrollWidth,\n      height = this.scrollHeight;\n    drawContext.beginPath();\n    drawContext.fillStyle = 'rgba(0,0,0,0.3)';\n    drawContext.clearRect(0, 0, width, height);\n    drawContext.fillRect(0, 0, width, height); // draw the rectangle\n  }\n\n  private drawRectangle(rect: Rectangle) {\n    const context = this.drawCanvas.getContext('2d');\n    context.lineJoin = 'round';\n    context.beginPath();\n    if (rect.color === this.feedbackService.hiddenColor) {\n      context.fillStyle = 'rgba(31, 31, 31, 0.75)';\n      context.fillRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n    } else {\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.lineWidth = 5;\n      context.strokeStyle = rect.color;\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n      context.stroke();\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      this.rectangles.forEach(tmpRect => {\n        if (tmpRect.color === this.feedbackService.highlightedColor) {\n          context.clearRect(tmpRect.startX, tmpRect.startY, tmpRect.width, tmpRect.height);\n        }\n      });\n    }\n  }\n\n  private addCanvasListeners(): void {\n    const mouseUp = fromEvent(document.documentElement, 'mouseup'),\n          mouseMove = fromEvent(document.documentElement, 'mousemove'),\n          mouseDown = fromEvent(document.documentElement, 'mousedown'),\n          scroll = fromEvent(window, 'scroll');\n\n    this.manuallyDrawRect(mouseDown, mouseMove, mouseUp);\n    this.autoDrawRect(mouseMove);\n    this.changeRectPosition(scroll);\n  }\n\n  private changeRectPosition(scroll: Observable<Event>) {\n    scroll.subscribe(\n      event => {\n        const currentWindowScrollX = window.scrollX,\n              currentWindowScrollY = window.scrollY;\n        this.rectangles.forEach(rect => {\n          rect.startY = rect.startY - (currentWindowScrollY - rect.windowScrollY);\n          rect.startX = rect.startX - (currentWindowScrollX - rect.windowScrollX);\n          rect.windowScrollY = currentWindowScrollY;\n          rect.windowScrollX = currentWindowScrollX;\n        });\n        this.drawPersistCanvasRectangles();\n      },\n      error => console.error(error)\n    );\n  }\n\n  private destroyCanvasListeners(): void {\n    if (this.manuallyDrawRect$) { this.manuallyDrawRect$.unsubscribe(); }\n    if (this.autoDrawRect$) { this.autoDrawRect$.unsubscribe(); }\n  }\n\n  private manuallyDrawRect(mouseDown: Observable<Event>, mouseMove: Observable<Event>, mouseUp: Observable<Event>): void {\n    const mouseDrag = mouseDown.pipe(mergeMap((mouseDownEvent: MouseEvent) => {\n      if (this.showToolbarTips) { this.showToolbarTips = false; }\n      this.autoDrawRect$.unsubscribe();\n      this.isDrawingRect = true;\n\n      const newRectangle = new Rectangle();\n      newRectangle.startX = mouseDownEvent.clientX;\n      newRectangle.startY = mouseDownEvent.clientY;\n      newRectangle.color = this.drawColor;\n\n      return mouseMove.pipe(\n        map((mouseMoveEvent: MouseEvent) => {\n          newRectangle.width = mouseMoveEvent.clientX - mouseDownEvent.clientX;\n          newRectangle.height = mouseMoveEvent.clientY - mouseDownEvent.clientY;\n          return newRectangle;\n        }),\n        finalize(() => {\n          // click to draw rectangle\n          if (newRectangle.width === undefined || newRectangle.height === undefined ||\n            newRectangle.width === 0 || newRectangle.height === 0) {\n            const rect = this.drawTempCanvasRectangle(mouseDownEvent);\n            if (rect) { this.rectangles.push(rect); }\n          } else {\n          // drag to draw rectangle\n            if (newRectangle.height < 0) {\n              newRectangle.startY = newRectangle.startY + newRectangle.height;\n              newRectangle.height = Math.abs(newRectangle.height);\n            }\n            if (newRectangle.width < 0) {\n              newRectangle.startX = newRectangle.startX + newRectangle.width;\n              newRectangle.width = Math.abs(newRectangle.width);\n            }\n            this.rectangles.push(newRectangle);\n          }\n          this.drawPersistCanvasRectangles();\n          this.autoDrawRect(mouseMove);\n          this.isDrawingRect = false;\n        }),\n        takeUntil(mouseUp));\n    }));\n\n    this.manuallyDrawRect$ = mouseDrag.subscribe(\n      (rec) => {\n        this.drawPersistCanvasRectangles();\n        this.drawRectangle(rec);\n      }\n    );\n  }\n\n  private autoDrawRect(mouseMove: Observable<Event>): void {\n    this.autoDrawRect$ = mouseMove.subscribe({\n      next: (mouseMoveEvent: MouseEvent) => {\n        this.drawPersistCanvasRectangles();\n        this.drawTempCanvasRectangle(mouseMoveEvent);\n      },\n      error: err => console.error('something wrong occurred: ' + err),\n    });\n  }\n\n  private drawPersistCanvasRectangles() {\n    this.drawContainerRect();\n    this.rectangles.forEach(tmpRect => {\n      this.drawRectangle(tmpRect);\n    });\n  }\n\n  private drawTempCanvasRectangle(event: MouseEvent) {\n    let rectangle: Rectangle = null;\n    const clientX = event.clientX,\n          clientY = event.clientY,\n          els = document.elementsFromPoint(clientX, clientY),\n          el = els[2];\n    if ((!this.isExcludeRect(els)) && el && this.elCouldBeHighlighted.indexOf(el.nodeName.toLowerCase()) > -1) {\n      rectangle = new Rectangle();\n      const rect = el.getBoundingClientRect();\n      this.drawCanvas.style.cursor = 'pointer';\n\n      Object.assign(rectangle, {\n        startX: rect.left,\n        startY: rect.top,\n        width: rect.width,\n        height: rect.height,\n        color: this.drawColor\n      });\n      this.drawRectangle(rectangle);\n    } else {\n      this.drawCanvas.style.cursor = 'crosshair';\n    }\n    return rectangle;\n  }\n\n  public closeRect(index: number) {\n    this.rectangles.splice(index, 1);\n    this.drawPersistCanvasRectangles();\n  }\n\n  private isExcludeRect(elements: Element[]): boolean {\n    const result = elements.some( el => {\n      return el.getAttribute('exclude-rect') === 'true';\n    });\n    return result;\n  }\n}\n","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-toolbar',\n  templateUrl: './feedback-toolbar.component.html',\n  styleUrls: ['./feedback-toolbar.component.css']\n})\nexport class FeedbackToolbarComponent implements AfterViewInit, OnChanges {\n  @Input()\n  public drawColor: string;\n  @Output()\n  public manipulate = new EventEmitter<string>();\n  public disableToolbarTips = false;\n  @ViewChild('toggleMove', { static: true })\n  private toggleMoveBtn: ElementRef;\n  public isSwitch = false;\n  public isDragging = false;\n  public vars: object = {};\n\n  constructor(public el: ElementRef, private feedbackService: FeedbackService) {\n    this.vars = feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    const elStyle = this.el.nativeElement.style;\n    elStyle.position = 'absolute';\n    elStyle.left = '43%';\n    elStyle.top = '22px';\n    this.addDragListenerOnMoveBtn();\n  }\n\n  public ngOnChanges() {\n    this.isSwitch = this.drawColor !== this.feedbackService.highlightedColor;\n  }\n\n  public done() {\n    this.manipulate.emit('done');\n  }\n\n  public toggleHighlight() {\n    this.isSwitch = false;\n    this.manipulate.emit(this.feedbackService.highlightedColor);\n  }\n\n  public toggleHide() {\n    this.isSwitch = true;\n    this.manipulate.emit(this.feedbackService.hiddenColor);\n  }\n\n  public addDragListenerOnMoveBtn() {\n    const mouseUp = fromEvent(this.toggleMoveBtn.nativeElement, 'mouseup');\n    const mouseMove = fromEvent(document.documentElement, 'mousemove');\n    const mouseDown = fromEvent(this.toggleMoveBtn.nativeElement, 'mousedown');\n    const mouseDrag = mouseDown.pipe(mergeMap((md: MouseEvent) => {\n      this.feedbackService.setIsDraggingToolbar(true);\n      const startX = md.offsetX;\n      const startY = md.offsetY;\n      this.disableToolbarTips = true;\n      this.isDragging = true;\n      // Calculate dif with mousemove until mouseup\n      return mouseMove.pipe(\n        map((mm: MouseEvent) => {\n          mm.preventDefault();\n          return {\n            left: mm.clientX - startX,\n            top: mm.clientY - startY\n          };\n        }),\n        finalize(() => {\n          this.isDragging = false;\n          this.disableToolbarTips = false;\n          this.feedbackService.setIsDraggingToolbar(false);\n        }),\n        takeUntil(mouseUp));\n    }));\n    mouseDrag.subscribe(\n      (pos) => {\n        this.el.nativeElement.style.left = pos.left + 'px';\n        this.el.nativeElement.style.top = pos.top + 'px';\n      });\n  }\n}\n","import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-rectangle',\n  templateUrl: './feedback-rectangle.component.html',\n  styleUrls: ['./feedback-rectangle.component.css']\n})\nexport class FeedbackRectangleComponent {\n  @Input()\n  public rectangle: Rectangle;\n  @Input()\n  public noHover: boolean;\n  @Output()\n  public close = new EventEmitter<boolean>();\n  public showCloseTag: boolean = false;\n\n  constructor(public feedbackService: FeedbackService) {\n  }\n\n  @HostListener('mouseenter')\n  public onMouseEnter(): void {\n    this.showCloseTag = this.noHover === false;\n  }\n\n  @HostListener('mouseleave')\n  public onMouseLeave(): void {\n    this.showCloseTag = false;\n  }\n\n  public onClose(): void {\n    this.close.emit();\n  }\n}\n","import { Directive, HostListener, EventEmitter, Output, Input, OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackService } from './feedback.service';\n\n@Directive({selector: '[feedback]'})\nexport class FeedbackDirective implements OnInit {\n  private overlay: Overlay;\n  @Input() title: string = 'Send feedback';\n  @Input() placeholder: string = 'Describe your issue or share your ideas';\n  @Input() editTip = 'Click to highlight or hide info';\n  @Input() checkboxLabel = 'Include screenshot';\n  @Input() cancelLabel = 'CANCEL';\n  @Input() sendLabel = 'SEND';\n  @Input() moveToolbarTip = 'move toolbar';\n  @Input() drawRectTip = 'Draw using yellow to highlight issues or black to hide sensitive info';\n  @Input() highlightTip = 'highlight issues';\n  @Input() hideTip = 'hide sensitive info';\n  @Input() editDoneLabel = 'DONE';\n  @Output() public send = new EventEmitter<object>();\n\n  public constructor(private dialogRef: MatDialog, private feedbackService: FeedbackService, overlay: Overlay) {\n    this.feedbackService.feedback$.subscribe(\n      (feedback) => {\n        this.send.emit(feedback);\n      }\n    );\n    this.overlay = overlay;\n  }\n\n  @HostListener('click')\n  public onClick() {\n    this.openFeedbackDialog();\n  }\n\n  public openFeedbackDialog() {\n    this.feedbackService.initScreenshotCanvas();\n    this.dialogRef.open(FeedbackDialogComponent, {\n      panelClass: 'feedbackDialog',\n      backdropClass: 'dialogBackDrop',\n      disableClose: true,\n      height: 'auto',\n      width: 'auto',\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n  }\n\n  ngOnInit(): void {\n    this.feedbackService.initialVariables = {\n      title: this.title,\n      placeholder: this.placeholder,\n      editTip: this.editTip,\n      checkboxLabel: this.checkboxLabel,\n      cancelLabel: this.cancelLabel,\n      sendLabel: this.sendLabel,\n      moveToolbarTip: this.moveToolbarTip,\n      drawRectTip: this.drawRectTip,\n      highlightTip: this.highlightTip,\n      hideTip: this.hideTip,\n      editDoneLabel: this.editDoneLabel\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackToolbarComponent } from './feedback-toolbar/feedback-toolbar.component';\nimport { FeedbackRectangleComponent } from './feedback-rectangle/feedback-rectangle.component';\nimport { FeedbackService } from './feedback.service';\nimport { FeedbackDirective } from './feedback.directive';\n\n@NgModule({\n  declarations: [\n    FeedbackDialogComponent,\n    FeedbackToolbarComponent,\n    FeedbackRectangleComponent,\n    FeedbackDirective\n  ],\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatTooltipModule,\n    CommonModule,\n    FormsModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    FeedbackDirective\n  ],\n  entryComponents: [\n    FeedbackDialogComponent\n  ],\n  providers: [\n    FeedbackService\n  ]\n})\nexport class FeedbackModule {\n}\n"]}