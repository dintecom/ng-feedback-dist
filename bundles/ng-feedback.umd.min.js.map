{"version":3,"sources":["../../../projects/ng-feedback/src/lib/entity/feedback.ts","../../../projects/ng-feedback/src/lib/entity/rectangle.ts","../../../projects/ng-feedback/src/lib/feedback.service.ts","../../../projects/ng-feedback/src/lib/feedback-toolbar/feedback-toolbar.component.html","../../../projects/ng-feedback/src/lib/feedback-toolbar/feedback-toolbar.component.ts","../../../projects/ng-feedback/src/lib/feedback-rectangle/feedback-rectangle.component.html","../../../projects/ng-feedback/src/lib/feedback-rectangle/feedback-rectangle.component.ts","../../../projects/ng-feedback/src/lib/feedback-dialog/feedback-dialog.component.html","../../../projects/ng-feedback/src/lib/feedback-dialog/feedback-dialog.component.ts","../../../projects/ng-feedback/src/lib/feedback.directive.ts","../../../projects/ng-feedback/src/lib/feedback.module.ts"],"names":["Rectangle","this","windowScrollY","window","scrollY","windowScrollX","scrollX","FeedbackService","initialVariables","highlightedColor","hiddenColor","screenshotCanvasSource","Subject","screenshotCanvas$","asObservable","feedbackSource","feedback$","isDraggingToolbarSource","isDraggingToolbar$","prototype","initScreenshotCanvas","_this","body","document","html2canvas","logging","width","documentElement","clientWidth","height","clientHeight","x","scrollLeft","y","scrollTop","allowTaint","useCORS","then","bodyCanvas","next","setCanvas","canvas","setFeedback","feedback","setIsDraggingToolbar","isDragging","getImgEle","img","toDataURL","imageEle","createElement","setAttribute","Object","assign","style","position","top","right","left","margin","maxHeight","maxWidth","transform","hideBackDrop","getElementsByClassName","backgroundColor","showBackDrop","dialogBackDrop","getAttribute","factory","ɵfac","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵproperty","FeedbackToolbarComponent","el","feedbackService","manipulate","EventEmitter","disableToolbarTips","isSwitch","vars","ngAfterViewInit","elStyle","nativeElement","addDragListenerOnMoveBtn","ngOnChanges","drawColor","done","emit","toggleHighlight","toggleHide","mouseUp","fromEvent","toggleMoveBtn","mouseMove","pipe","mergeMap","md","startX","offsetX","startY","offsetY","map","mm","preventDefault","clientX","clientY","finalize","takeUntil","subscribe","pos","i0.ɵɵlistener","i0.ɵɵnamespaceSVG","i0","ɵɵdirectiveInject","ElementRef","selectors","viewQuery","rf","ctx","i0.ɵɵnamespaceHTML","i0.ɵɵtemplate","i0.ɵɵtext","i0.ɵɵadvance","ɵɵpureFunction1","_c2","i0.ɵɵtextInterpolate","FeedbackRectangleComponent","close","showCloseTag","onMouseEnter","noHover","onMouseLeave","onClose","hostBindings","ɵɵpureFunction3","_c1$1","rectangle","color","ɵɵrestoreView","_r10_1","ɵɵnextContext","isIncludeScreenshot","dialogRef","i0.ɵɵtextInterpolate1","ctx_r2","showToolbar","isDrawingRect","FeedbackDialogComponent","detector","Feedback","includeScreenshot","showSpinner","showToolbarTips","rectangles","scrollWidth","scrollHeight","elCouldBeHighlighted","description","screenshot","screenshotEle","appendScreenshot","destroyCanvasListeners","addCanvasListeners","afterClosed","sendNow","expandDrawingBoard","drawCanvas","detectChanges","initBackgroundCanvas","appendChild","console","log","onEscapeKeyDownHandler","evt","manipulation","startDraw","screenshotParent","getElementById","drawContainerRect","drawContext","getContext","beginPath","fillStyle","clearRect","fillRect","drawRectangle","rect","context","lineJoin","lineWidth","strokeStyle","stroke","forEach","tmpRect","mouseDown","scroll","manuallyDrawRect","autoDrawRect","changeRectPosition","event","currentWindowScrollX","currentWindowScrollY","drawPersistCanvasRectangles","error","manuallyDrawRect$","unsubscribe","autoDrawRect$","mouseDrag","mouseDownEvent","newRectangle","mouseMoveEvent","undefined","drawTempCanvasRectangle","push","Math","abs","rec","err","els","elementsFromPoint","isExcludeRect","indexOf","nodeName","toLowerCase","getBoundingClientRect","cursor","closeRect","index","splice","elements","some","i1","MatDialogRef","ChangeDetectorRef","$event","ɵɵresolveDocument","FeedbackDirective","overlay","title","placeholder","editTip","checkboxLabel","cancelLabel","sendLabel","moveToolbarTip","drawRectTip","highlightTip","hideTip","editDoneLabel","send","onClick","openFeedbackDialog","open","panelClass","backdropClass","disableClose","scrollStrategy","scrollStrategies","reposition","ngOnInit","MatDialog","i3$1","Overlay","FeedbackModule","providers","imports","MatDialogModule","MatButtonModule","MatIconModule","MatInputModule","MatTooltipModule","CommonModule","FormsModule","MatCheckboxModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["export class Feedback {\n  public description: string;\n  public screenshot: string;\n}\n","export class Rectangle {\n  public startX: number;\n  public startY: number;\n  public width: number;\n  public height: number;\n  public color: string;\n  public windowScrollY: number = window.scrollY;\n  public windowScrollX: number = window.scrollX;\n}\n","import { Injectable } from '@angular/core';\nimport html2canvas from 'html2canvas';\nimport { Subject, Observable } from 'rxjs';\nimport { Feedback } from './entity/feedback';\n\n@Injectable()\nexport class FeedbackService {\n  public initialVariables: object = {};\n  public highlightedColor = 'yellow';\n  public hiddenColor = 'black';\n  private screenshotCanvasSource = new Subject<HTMLCanvasElement>();\n  public screenshotCanvas$: Observable<HTMLCanvasElement> = this.screenshotCanvasSource.asObservable();\n\n  private feedbackSource = new Subject<Feedback>();\n  public feedback$: Observable<Feedback> = this.feedbackSource.asObservable();\n\n  private isDraggingToolbarSource = new Subject<boolean>();\n  public isDraggingToolbar$: Observable<boolean> = this.isDraggingToolbarSource.asObservable();\n\n  public initScreenshotCanvas() {\n    const body = document.body;\n    html2canvas(body, {\n      logging: false,\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight,\n      x: document.documentElement.scrollLeft,\n      y: document.documentElement.scrollTop,\n      allowTaint : true,\n      useCORS: true\n    }).then(bodyCanvas => {\n      this.screenshotCanvasSource.next(bodyCanvas);\n    });\n  }\n\n  public setCanvas(canvas: HTMLCanvasElement): void {\n    this.screenshotCanvasSource.next(canvas);\n  }\n\n  public setFeedback(feedback: Feedback): void {\n    this.feedbackSource.next(feedback);\n  }\n\n  public setIsDraggingToolbar(isDragging: boolean): void {\n    this.isDraggingToolbarSource.next(isDragging);\n  }\n\n  public getImgEle(canvas): HTMLElement {\n    const img = canvas.toDataURL('image/png'),\n          imageEle = document.createElement('img');\n    imageEle.setAttribute('src', img);\n    Object.assign(imageEle.style, {\n      position: 'absolute',\n      top: '50%',\n      right: '0',\n      left: '0',\n      margin: '0 auto',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      transform: 'translateY(-50%)'\n    });\n    return imageEle;\n  }\n\n  public hideBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    dialogBackDrop.style.backgroundColor = 'initial';\n  }\n\n  public showBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    if (!dialogBackDrop.getAttribute('data-html2canvas-ignore')) {\n      dialogBackDrop.setAttribute('data-html2canvas-ignore', 'true');\n    }\n    dialogBackDrop.style.backgroundColor = 'rgba(0, 0, 0, .288)';\n  }\n}\n","<div exclude-rect=\"true\" class=\"toolbar\">\n  <div class=\"move-toolbar\" #toggleMove [matTooltip]=\"vars['moveToolbarTip']\" [matTooltipDisabled]=\"disableToolbarTips\">\n    <svg focusable=\"false\" aria-label=\"Drag\" fill=\"#BDBDBD\" height=\"56\" width=\"16\"\n         viewBox=\"-2 2 12 12\">\n      <circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"></circle>\n      <circle cx=\"1.5\" cy=\"7.5\" r=\"1.5\"></circle>\n      <circle cx=\"1.5\" cy=\"13.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"1.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"7.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"13.5\" r=\"1.5\"></circle>\n    </svg>\n  </div>\n  <button #highlightBtn (click)=\"toggleHighlight()\" [matTooltip]=\"vars['highlightTip']\"\n          [matTooltipDisabled]=\"disableToolbarTips\" class=\"highlight-toggle\" [ngClass]=\"{'deepen-color': !isSwitch}\">\n    <span class=\"toggle\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\" height=\"36\" width=\"36\"\n           fill=\"#ffd740\">\n        <path d=\"M3 3h18v18H3z\"></path>\n      </svg>\n\n      <svg focusable=\"false\" aria-label=\"\" fill=\"#757575\" viewBox=\"0 0 24 24\"\n           height=\"36\" width=\"36\" [ngClass]=\"{'toggle-decorator': !isSwitch}\" *ngIf=\"!isSwitch\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n    </span>\n  </button>\n  <button (click)=\"toggleHide()\" [matTooltip]=\"vars['hideTip']\" [matTooltipDisabled]=\"disableToolbarTips\"\n          class=\"hide-toggle\" [ngClass]=\"{'deepen-color': isSwitch}\">\n    <span class=\"toggle\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\" height=\"36\" width=\"36\"\n           fill=\"#000\">\n        <path d=\"M3 3h18v18H3z\"></path>\n      </svg>\n      <svg focusable=\"false\" aria-label=\"\" fill=\"#757575\" viewBox=\"0 0 24 24\"\n           height=\"36\" width=\"36\" [ngClass]=\"{'toggle-decorator': isSwitch}\" *ngIf=\"isSwitch\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n    </span>\n  </button>\n  <button mat-button class=\"merge-button\" (click)=\"done()\">{{vars['editDoneLabel']}}</button>\n</div>\n","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-toolbar',\n  templateUrl: './feedback-toolbar.component.html',\n  styleUrls: ['./feedback-toolbar.component.css']\n})\nexport class FeedbackToolbarComponent implements AfterViewInit, OnChanges {\n  @Input()\n  public drawColor: string;\n  @Output()\n  public manipulate = new EventEmitter<string>();\n  public disableToolbarTips = false;\n  @ViewChild('toggleMove', { static: true })\n  private toggleMoveBtn: ElementRef;\n  public isSwitch = false;\n  public isDragging = false;\n  public vars: object = {};\n\n  constructor(public el: ElementRef, private feedbackService: FeedbackService) {\n    this.vars = feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    const elStyle = this.el.nativeElement.style;\n    elStyle.position = 'absolute';\n    elStyle.left = '43%';\n    elStyle.top = '1em';\n    this.addDragListenerOnMoveBtn();\n  }\n\n  public ngOnChanges() {\n    this.isSwitch = this.drawColor !== this.feedbackService.highlightedColor;\n  }\n\n  public done() {\n    this.manipulate.emit('done');\n  }\n\n  public toggleHighlight() {\n    this.isSwitch = false;\n    this.manipulate.emit(this.feedbackService.highlightedColor);\n  }\n\n  public toggleHide() {\n    this.isSwitch = true;\n    this.manipulate.emit(this.feedbackService.hiddenColor);\n  }\n\n  public addDragListenerOnMoveBtn() {\n    const mouseUp = fromEvent(this.toggleMoveBtn.nativeElement, 'mouseup');\n    const mouseMove = fromEvent(document.documentElement, 'mousemove');\n    const mouseDown = fromEvent(this.toggleMoveBtn.nativeElement, 'mousedown');\n    const mouseDrag = mouseDown.pipe(mergeMap((md: MouseEvent) => {\n      this.feedbackService.setIsDraggingToolbar(true);\n      const startX = md.offsetX;\n      const startY = md.offsetY;\n      this.disableToolbarTips = true;\n      this.isDragging = true;\n      // Calculate dif with mousemove until mouseup\n      return mouseMove.pipe(\n        map((mm: MouseEvent) => {\n          mm.preventDefault();\n          return {\n            left: mm.clientX - startX,\n            top: mm.clientY - startY\n          };\n        }),\n        finalize(() => {\n          this.isDragging = false;\n          this.disableToolbarTips = false;\n          this.feedbackService.setIsDraggingToolbar(false);\n        }),\n        takeUntil(mouseUp));\n    }));\n    mouseDrag.subscribe(\n      (pos) => {\n        this.el.nativeElement.style.left = pos.left + 'px';\n        this.el.nativeElement.style.top = pos.top + 'px';\n      });\n  }\n}\n","<div exclude-rect=\"true\" class=\"rect\" [ngStyle]=\"{'left.px': rectangle.startX,\n                              'top.px': rectangle.startY,\n                              'width.px': rectangle.width ,\n                              'height.px': rectangle.height }\"\n    [ngClass]=\"{'highlight': rectangle.color === feedbackService.highlightedColor,\n                'hide': rectangle.color !== feedbackService.highlightedColor,\n                'noHover': noHover}\">\n  <span exclude-rect=\"true\" class=\"close\" *ngIf=\"showCloseTag\" (click)=\"onClose()\">\n    <svg viewBox=\"0 0 1024 1024\"\n         width=\"16\" height=\"16\">\n        <path\n          d=\"M896 224l-96-96-288 288-288-288-96 96 288 288-288 288 96 96 288-288 288 288 96-96-288-288 288-288z\"></path>\n    </svg>\n  </span>\n</div>\n","import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-rectangle',\n  templateUrl: './feedback-rectangle.component.html',\n  styleUrls: ['./feedback-rectangle.component.css']\n})\nexport class FeedbackRectangleComponent {\n  @Input()\n  public rectangle: Rectangle;\n  @Input()\n  public noHover: boolean;\n  @Output()\n  public close = new EventEmitter<boolean>();\n  public showCloseTag: boolean = false;\n\n  constructor(public feedbackService: FeedbackService) {\n  }\n\n  @HostListener('mouseenter')\n  public onMouseEnter(): void {\n    this.showCloseTag = this.noHover === false;\n  }\n\n  @HostListener('mouseleave')\n  public onMouseLeave(): void {\n    this.showCloseTag = false;\n  }\n\n  public onClose(): void {\n    this.close.emit();\n  }\n}\n","<div class=\"dialog\" *ngIf=\"!showToolbar\" data-html2canvas-ignore=\"true\">\n  <div class=\"dialog-title\">\n    <div class=\"title-font\">\n      {{vars['title']}}\n    </div>\n  </div>\n  <div class=\"dialog-content\">\n    <div class=\"description-tips\">\n      <div *ngIf=\"feedback.description==''\">{{vars['placeholder']}}</div>\n    </div>\n    <textarea\n      autofocus\n      class=\"description\"\n      [(ngModel)]=\"feedback.description\"\n    ></textarea>\n  </div>\n  <div class=\"screenshot-checkbox\">\n    <mat-checkbox [(ngModel)]=\"includeScreenshot\" (change)=\"isIncludeScreenshot()\">{{vars['checkboxLabel']}}</mat-checkbox>\n  </div>\n\n  <div #screenshotParent class=\"screenshot-content\" (click)=\"expandDrawingBoard()\" *ngIf=\"includeScreenshot\">\n    <mat-spinner class=\"loading\" [diameter]=\"30\" ></mat-spinner>\n    <div></div>\n    <div class=\"screenshot-tips\" *ngIf=\"!showSpinner\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n      <span class=\"screenshot-tips-content\">{{vars['editTip']}}</span>\n    </div>\n  </div>\n\n  <mat-dialog-actions class=\"dialog-actions\" align=\"end\">\n    <button mat-button (click)=\"dialogRef.close()\" class=\"action-button\">{{vars['cancelLabel']}}</button>\n    <button mat-button (click)=\"dialogRef.close(true)\" class=\"submit-button action-button\">{{vars['sendLabel']}}</button>\n  </mat-dialog-actions>\n</div>\n<div *ngIf=\"showToolbar\" data-html2canvas-ignore=\"true\">\n  <div class=\"toolbar-tips\" *ngIf=\"showToolbarTips\">\n    {{vars['drawRectTip']}}\n  </div>\n\n  <feedback-toolbar [drawColor]=\"drawColor\" (manipulate)=\"manipulate($event)\"></feedback-toolbar>\n</div>\n<div *ngFor=\"let rectangle of rectangles; index as index\" >\n    <feedback-rectangle [rectangle]=\"rectangle\" [noHover]=\"!showToolbar || isDrawingRect\" (close)=\"closeRect(index)\">\n    </feedback-rectangle>\n</div>\n<canvas id=\"draw-canvas\" class=\"drawCanvas\" [ngClass]=\"{'pointerCursor': !showToolbar}\"></canvas>\n","import { Component, AfterViewInit, ViewChild, ElementRef, ChangeDetectorRef, HostListener } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Feedback } from '../entity/feedback';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-dialog',\n  templateUrl: './feedback-dialog.component.html',\n  styleUrls: ['./feedback-dialog.component.css']\n})\nexport class FeedbackDialogComponent implements AfterViewInit {\n  public showToolbar = false;\n  public vars: object = {};\n  public feedback = new Feedback();\n  public includeScreenshot: boolean = true;\n  public showSpinner = true;\n  public screenshotEle: HTMLElement;\n  public drawCanvas: HTMLCanvasElement;\n  public showToolbarTips: boolean = true;\n  @ViewChild('screenshotParent')\n  public screenshotParent: ElementRef;\n  public drawColor: string = this.feedbackService.highlightedColor;\n  public rectangles: Rectangle[] = [];\n  private scrollWidth = document.documentElement.scrollWidth;\n  private scrollHeight = document.documentElement.scrollHeight;\n  private elCouldBeHighlighted = ['button', 'a', 'span', 'em', 'i', 'h1', 'h2', 'h3', 'h4',\n    'h5', 'h6', 'p', 'strong', 'small', 'sub', 'sup', 'b', 'time', 'img',\n    'video', 'input', 'label', 'select', 'textarea', 'article', 'summary', 'section'];\n  // the flag field 'isManuallyDrawRect' to solve conflict between manually draw and auto draw\n  private manuallyDrawRect$: Subscription;\n  private autoDrawRect$: Subscription;\n  public isDrawingRect: boolean = false;\n\n  constructor(public dialogRef: MatDialogRef<FeedbackDialogComponent>,\n              private feedbackService: FeedbackService,\n              private detector: ChangeDetectorRef,\n              private el: ElementRef) {\n    this.feedback = new Feedback();\n    this.feedback.description = '';\n    this.vars = this.feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    this.feedbackService.screenshotCanvas$.subscribe((canvas) => {\n      this.showSpinner = false;\n      this.feedback.screenshot = canvas.toDataURL('image/png');\n      this.screenshotEle = this.feedbackService.getImgEle(canvas);\n      this.appendScreenshot();\n    });\n\n    this.feedbackService.isDraggingToolbar$.subscribe((isDragging) => {\n      if (isDragging) {\n        this.destroyCanvasListeners();\n      } else {\n        this.addCanvasListeners();\n      }\n    });\n\n    this.dialogRef.afterClosed().subscribe((sendNow) => {\n      if (sendNow === true) {\n        this.feedbackService.setFeedback(this.feedback);\n      }\n    });\n    this.feedbackService.showBackDrop();\n  }\n\n  public expandDrawingBoard() {\n    this.showToolbar = true;\n    if (!this.drawCanvas) {\n      this.detector.detectChanges();\n      this.initBackgroundCanvas();\n      this.feedbackService.hideBackDrop();\n    }\n    this.addCanvasListeners();\n    this.el.nativeElement.appendChild(this.drawCanvas);\n    this.feedbackService.hideBackDrop();\n    console.log('expand the board');\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  public onEscapeKeyDownHandler(evt: KeyboardEvent) {\n    this.showToolbar = false;\n    this.includeScreenshot = true;\n    this.detector.detectChanges();\n    this.dialogRef.close('key down esc to close');\n  }\n\n  public manipulate(manipulation: string) {\n    if (manipulation === 'done') {\n      this.showToolbarTips = false;\n      this.showSpinner = true;\n      this.destroyCanvasListeners();\n      this.showToolbar = false;\n      this.detector.detectChanges();\n      this.feedbackService.initScreenshotCanvas();\n    } else {\n      this.startDraw(manipulation);\n    }\n  }\n\n  public startDraw(color: string) {\n    this.drawColor = color;\n  }\n\n  public isIncludeScreenshot() {\n    if (this.includeScreenshot) {\n      this.detector.detectChanges();\n      this.showSpinner = false;\n      this.appendScreenshot();\n      this.feedback.screenshot = this.screenshotEle.getAttribute('src');\n    } else {\n      delete this.feedback['screenshot'];\n      this.showSpinner = true;\n    }\n  }\n\n  private appendScreenshot() {\n    if (this.screenshotParent) { this.screenshotParent.nativeElement.appendChild(this.screenshotEle); }\n  }\n\n  private initBackgroundCanvas() {\n    this.drawCanvas = document.getElementById('draw-canvas') as HTMLCanvasElement;\n    // The canvas to draw, must use this way to initial the height and width\n    this.drawCanvas.style.height = this.scrollHeight + '';\n    this.drawCanvas.style.width = this.scrollWidth + '';\n    this.drawCanvas.height = this.scrollHeight;\n    this.drawCanvas.width = this.scrollWidth;\n    this.drawContainerRect();\n  }\n\n  private drawContainerRect() {\n    const drawContext = this.drawCanvas.getContext('2d'),\n      width = this.scrollWidth,\n      height = this.scrollHeight;\n    drawContext.beginPath();\n    drawContext.fillStyle = 'rgba(0,0,0,0.3)';\n    drawContext.clearRect(0, 0, width, height);\n    drawContext.fillRect(0, 0, width, height); // draw the rectangle\n  }\n\n  private drawRectangle(rect: Rectangle) {\n    const context = this.drawCanvas.getContext('2d');\n    context.lineJoin = 'round';\n    context.beginPath();\n    if (rect.color === this.feedbackService.hiddenColor) {\n      context.fillStyle = 'rgba(31, 31, 31, 0.75)';\n      context.fillRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n    } else {\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.lineWidth = 5;\n      context.strokeStyle = rect.color;\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n      context.stroke();\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      this.rectangles.forEach(tmpRect => {\n        if (tmpRect.color === this.feedbackService.highlightedColor) {\n          context.clearRect(tmpRect.startX, tmpRect.startY, tmpRect.width, tmpRect.height);\n        }\n      });\n    }\n  }\n\n  private addCanvasListeners(): void {\n    const mouseUp = fromEvent(document.documentElement, 'mouseup'),\n          mouseMove = fromEvent(document.documentElement, 'mousemove'),\n          mouseDown = fromEvent(document.documentElement, 'mousedown'),\n          scroll = fromEvent(window, 'scroll');\n\n    this.manuallyDrawRect(mouseDown, mouseMove, mouseUp);\n    this.autoDrawRect(mouseMove);\n    this.changeRectPosition(scroll);\n  }\n\n  private changeRectPosition(scroll: Observable<Event>) {\n    scroll.subscribe(\n      event => {\n        const currentWindowScrollX = window.scrollX,\n              currentWindowScrollY = window.scrollY;\n        this.rectangles.forEach(rect => {\n          rect.startY = rect.startY - (currentWindowScrollY - rect.windowScrollY);\n          rect.startX = rect.startX - (currentWindowScrollX - rect.windowScrollX);\n          rect.windowScrollY = currentWindowScrollY;\n          rect.windowScrollX = currentWindowScrollX;\n        });\n        this.drawPersistCanvasRectangles();\n      },\n      error => console.error(error)\n    );\n  }\n\n  private destroyCanvasListeners(): void {\n    if (this.manuallyDrawRect$) { this.manuallyDrawRect$.unsubscribe(); }\n    if (this.autoDrawRect$) { this.autoDrawRect$.unsubscribe(); }\n  }\n\n  private manuallyDrawRect(mouseDown: Observable<Event>, mouseMove: Observable<Event>, mouseUp: Observable<Event>): void {\n    const mouseDrag = mouseDown.pipe(mergeMap((mouseDownEvent: MouseEvent) => {\n      if (this.showToolbarTips) { this.showToolbarTips = false; }\n      this.autoDrawRect$.unsubscribe();\n      this.isDrawingRect = true;\n\n      const newRectangle = new Rectangle();\n      newRectangle.startX = mouseDownEvent.clientX;\n      newRectangle.startY = mouseDownEvent.clientY;\n      newRectangle.color = this.drawColor;\n\n      return mouseMove.pipe(\n        map((mouseMoveEvent: MouseEvent) => {\n          newRectangle.width = mouseMoveEvent.clientX - mouseDownEvent.clientX;\n          newRectangle.height = mouseMoveEvent.clientY - mouseDownEvent.clientY;\n          return newRectangle;\n        }),\n        finalize(() => {\n          // click to draw rectangle\n          if (newRectangle.width === undefined || newRectangle.height === undefined ||\n            newRectangle.width === 0 || newRectangle.height === 0) {\n            const rect = this.drawTempCanvasRectangle(mouseDownEvent);\n            if (rect) { this.rectangles.push(rect); }\n          } else {\n          // drag to draw rectangle\n            if (newRectangle.height < 0) {\n              newRectangle.startY = newRectangle.startY + newRectangle.height;\n              newRectangle.height = Math.abs(newRectangle.height);\n            }\n            if (newRectangle.width < 0) {\n              newRectangle.startX = newRectangle.startX + newRectangle.width;\n              newRectangle.width = Math.abs(newRectangle.width);\n            }\n            this.rectangles.push(newRectangle);\n          }\n          this.drawPersistCanvasRectangles();\n          this.autoDrawRect(mouseMove);\n          this.isDrawingRect = false;\n        }),\n        takeUntil(mouseUp));\n    }));\n\n    this.manuallyDrawRect$ = mouseDrag.subscribe(\n      (rec) => {\n        this.drawPersistCanvasRectangles();\n        this.drawRectangle(rec);\n      }\n    );\n  }\n\n  private autoDrawRect(mouseMove: Observable<Event>): void {\n    this.autoDrawRect$ = mouseMove.subscribe({\n      next: (mouseMoveEvent: MouseEvent) => {\n        this.drawPersistCanvasRectangles();\n        this.drawTempCanvasRectangle(mouseMoveEvent);\n      },\n      error: err => console.error('something wrong occurred: ' + err),\n    });\n  }\n\n  private drawPersistCanvasRectangles() {\n    this.drawContainerRect();\n    this.rectangles.forEach(tmpRect => {\n      this.drawRectangle(tmpRect);\n    });\n  }\n\n  private drawTempCanvasRectangle(event: MouseEvent) {\n    let rectangle: Rectangle = null;\n    const clientX = event.clientX,\n          clientY = event.clientY,\n          els = document.elementsFromPoint(clientX, clientY),\n          el = els[2];\n    if ((!this.isExcludeRect(els)) && el && this.elCouldBeHighlighted.indexOf(el.nodeName.toLowerCase()) > -1) {\n      rectangle = new Rectangle();\n      const rect = el.getBoundingClientRect();\n      this.drawCanvas.style.cursor = 'pointer';\n\n      Object.assign(rectangle, {\n        startX: rect.left,\n        startY: rect.top,\n        width: rect.width,\n        height: rect.height,\n        color: this.drawColor\n      });\n      this.drawRectangle(rectangle);\n    } else {\n      this.drawCanvas.style.cursor = 'crosshair';\n    }\n    return rectangle;\n  }\n\n  public closeRect(index: number) {\n    this.rectangles.splice(index, 1);\n    this.drawPersistCanvasRectangles();\n  }\n\n  private isExcludeRect(elements: Element[]): boolean {\n    const result = elements.some( el => {\n      return el.getAttribute('exclude-rect') === 'true';\n    });\n    return result;\n  }\n}\n","import { Directive, HostListener, EventEmitter, Output, Input, OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Feedback } from './entity/feedback';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackService } from './feedback.service';\n\n@Directive({selector: '[feedback]'})\nexport class FeedbackDirective implements OnInit {\n  private overlay: Overlay;\n  @Input() title: string = 'Send feedback';\n  @Input() placeholder: string = 'Describe your issue or share your ideas';\n  @Input() editTip = 'Click to highlight or hide info';\n  @Input() checkboxLabel = 'Include screenshot';\n  @Input() cancelLabel = 'CANCEL';\n  @Input() sendLabel = 'SEND';\n  @Input() moveToolbarTip = 'move toolbar';\n  @Input() drawRectTip = 'Draw using yellow to highlight issues or black to hide sensitive info';\n  @Input() highlightTip = 'highlight issues';\n  @Input() hideTip = 'hide sensitive info';\n  @Input() editDoneLabel = 'DONE';\n  @Output() public send = new EventEmitter<Feedback>();\n\n  public constructor(private dialogRef: MatDialog, private feedbackService: FeedbackService, overlay: Overlay) {\n    this.feedbackService.feedback$.subscribe(\n      (feedback) => {\n        this.send.emit(feedback);\n      }\n    );\n    this.overlay = overlay;\n  }\n\n  @HostListener('click')\n  public onClick() {\n    this.openFeedbackDialog();\n  }\n\n  public openFeedbackDialog() {\n    this.feedbackService.initScreenshotCanvas();\n    this.dialogRef.open(FeedbackDialogComponent, {\n      panelClass: 'feedbackDialog',\n      backdropClass: 'dialogBackDrop',\n      disableClose: true,\n      height: 'auto',\n      width: 'auto',\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n  }\n\n  ngOnInit(): void {\n    this.feedbackService.initialVariables = {\n      title: this.title,\n      placeholder: this.placeholder,\n      editTip: this.editTip,\n      checkboxLabel: this.checkboxLabel,\n      cancelLabel: this.cancelLabel,\n      sendLabel: this.sendLabel,\n      moveToolbarTip: this.moveToolbarTip,\n      drawRectTip: this.drawRectTip,\n      highlightTip: this.highlightTip,\n      hideTip: this.hideTip,\n      editDoneLabel: this.editDoneLabel\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackToolbarComponent } from './feedback-toolbar/feedback-toolbar.component';\nimport { FeedbackRectangleComponent } from './feedback-rectangle/feedback-rectangle.component';\nimport { FeedbackService } from './feedback.service';\nimport { FeedbackDirective } from './feedback.directive';\n\n@NgModule({\n  declarations: [\n    FeedbackDialogComponent,\n    FeedbackToolbarComponent,\n    FeedbackRectangleComponent,\n    FeedbackDirective\n  ],\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatTooltipModule,\n    CommonModule,\n    FormsModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    FeedbackDirective\n  ],\n  entryComponents: [\n    FeedbackDialogComponent\n  ],\n  providers: [\n    FeedbackService\n  ]\n})\nexport class FeedbackModule {\n}\n"]}