{"version":3,"sources":["../../../projects/ng-feedback/src/lib/entity/feedback.ts","../../../projects/ng-feedback/src/lib/entity/rectangle.ts","../../../projects/ng-feedback/src/lib/feedback.service.ts","../../../projects/ng-feedback/src/lib/feedback-toolbar/feedback-toolbar.component.html","../../../projects/ng-feedback/src/lib/feedback-toolbar/feedback-toolbar.component.ts","../../../projects/ng-feedback/src/lib/feedback-rectangle/feedback-rectangle.component.html","../../../projects/ng-feedback/src/lib/feedback-rectangle/feedback-rectangle.component.ts","../../../projects/ng-feedback/src/lib/feedback-dialog/feedback-dialog.component.html","../../../projects/ng-feedback/src/lib/feedback-dialog/feedback-dialog.component.ts","../../../projects/ng-feedback/src/lib/feedback.directive.ts","../../../projects/ng-feedback/src/lib/feedback.module.ts"],"names":["Rectangle","this","windowScrollY","window","scrollY","windowScrollX","scrollX","FeedbackService","initialVariables","highlightedColor","hiddenColor","screenshotCanvasSource","Subject","screenshotCanvas$","asObservable","feedbackSource","feedback$","isDraggingToolbarSource","isDraggingToolbar$","prototype","initScreenshotCanvas","_this","body","document","html2canvas","logging","width","documentElement","clientWidth","height","clientHeight","x","scrollLeft","y","scrollTop","allowTaint","useCORS","then","bodyCanvas","next","setCanvas","canvas","setFeedback","feedback","setIsDraggingToolbar","isDragging","getImgEle","img","toDataURL","imageEle","createElement","setAttribute","Object","assign","style","position","top","right","left","margin","maxHeight","maxWidth","transform","hideBackDrop","getElementsByClassName","backgroundColor","showBackDrop","dialogBackDrop","getAttribute","factory","ɵfac","Injectable","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵproperty","FeedbackToolbarComponent","el","feedbackService","manipulate","EventEmitter","disableToolbarTips","isSwitch","vars","ngAfterViewInit","elStyle","nativeElement","addDragListenerOnMoveBtn","ngOnChanges","drawColor","done","emit","toggleHighlight","toggleHide","mouseUp","fromEvent","toggleMoveBtn","mouseMove","pipe","mergeMap","md","startX","offsetX","startY","offsetY","map","mm","preventDefault","clientX","clientY","finalize","takeUntil","subscribe","pos","i0.ɵɵlistener","i0.ɵɵnamespaceSVG","i0","ɵɵdirectiveInject","ElementRef","selectors","viewQuery","rf","ctx","i0.ɵɵnamespaceHTML","i0.ɵɵtemplate","i0.ɵɵtext","i0.ɵɵadvance","ɵɵpureFunction1","_c2","i0.ɵɵtextInterpolate","Component","selector","templateUrl","styleUrls","Input","Output","ViewChild","static","FeedbackRectangleComponent","close","showCloseTag","onMouseEnter","noHover","onMouseLeave","onClose","hostBindings","ɵɵpureFunction3","_c1$1","rectangle","color","HostListener","ɵɵrestoreView","_r10_1","ɵɵnextContext","isIncludeScreenshot","dialogRef","i0.ɵɵtextInterpolate1","ctx_r2","showToolbar","isDrawingRect","FeedbackDialogComponent","detector","Feedback","includeScreenshot","showSpinner","showToolbarTips","rectangles","scrollWidth","scrollHeight","elCouldBeHighlighted","description","screenshot","screenshotEle","appendScreenshot","destroyCanvasListeners","addCanvasListeners","afterClosed","sendNow","expandDrawingBoard","drawCanvas","detectChanges","initBackgroundCanvas","appendChild","console","log","onEscapeKeyDownHandler","evt","manipulation","startDraw","screenshotParent","getElementById","drawContainerRect","drawContext","getContext","beginPath","fillStyle","clearRect","fillRect","drawRectangle","rect","context","lineJoin","lineWidth","strokeStyle","stroke","forEach","tmpRect","mouseDown","scroll","manuallyDrawRect","autoDrawRect","changeRectPosition","event","currentWindowScrollX","currentWindowScrollY","drawPersistCanvasRectangles","error","manuallyDrawRect$","unsubscribe","autoDrawRect$","mouseDrag","mouseDownEvent","newRectangle","mouseMoveEvent","undefined","drawTempCanvasRectangle","push","Math","abs","rec","err","els","elementsFromPoint","isExcludeRect","indexOf","nodeName","toLowerCase","getBoundingClientRect","cursor","closeRect","index","splice","elements","some","i1","MatDialogRef","ChangeDetectorRef","$event","ɵɵresolveDocument","FeedbackDirective","overlay","title","placeholder","editTip","checkboxLabel","cancelLabel","sendLabel","moveToolbarTip","drawRectTip","highlightTip","hideTip","editDoneLabel","send","onClick","openFeedbackDialog","open","panelClass","backdropClass","disableClose","scrollStrategy","scrollStrategies","reposition","ngOnInit","MatDialog","i3$1","Overlay","Directive","FeedbackModule","providers","imports","MatDialogModule","MatButtonModule","MatIconModule","MatInputModule","MatTooltipModule","CommonModule","FormsModule","MatCheckboxModule","MatProgressSpinnerModule","declarations","exports","NgModule","entryComponents"],"mappings":"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","sourcesContent":["export class Feedback {\n  public description: string;\n  public screenshot: string;\n}\n","export class Rectangle {\n  public startX: number;\n  public startY: number;\n  public width: number;\n  public height: number;\n  public color: string;\n  public windowScrollY: number = window.scrollY;\n  public windowScrollX: number = window.scrollX;\n}\n","import { Injectable } from '@angular/core';\nimport html2canvas from 'html2canvas';\nimport { Subject, Observable } from 'rxjs';\nimport { Feedback } from './entity/feedback';\n\n@Injectable()\nexport class FeedbackService {\n  public initialVariables: object = {};\n  public highlightedColor = 'yellow';\n  public hiddenColor = 'black';\n  private screenshotCanvasSource = new Subject<HTMLCanvasElement>();\n  public screenshotCanvas$: Observable<HTMLCanvasElement> = this.screenshotCanvasSource.asObservable();\n\n  private feedbackSource = new Subject<Feedback>();\n  public feedback$: Observable<Feedback> = this.feedbackSource.asObservable();\n\n  private isDraggingToolbarSource = new Subject<boolean>();\n  public isDraggingToolbar$: Observable<boolean> = this.isDraggingToolbarSource.asObservable();\n\n  public initScreenshotCanvas() {\n    const body = document.body;\n    html2canvas(body, {\n      logging: false,\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight,\n      x: document.documentElement.scrollLeft,\n      y: document.documentElement.scrollTop,\n      allowTaint : true,\n      useCORS: true\n    }).then(bodyCanvas => {\n      this.screenshotCanvasSource.next(bodyCanvas);\n    });\n  }\n\n  public setCanvas(canvas: HTMLCanvasElement): void {\n    this.screenshotCanvasSource.next(canvas);\n  }\n\n  public setFeedback(feedback: Feedback): void {\n    this.feedbackSource.next(feedback);\n  }\n\n  public setIsDraggingToolbar(isDragging: boolean): void {\n    this.isDraggingToolbarSource.next(isDragging);\n  }\n\n  public getImgEle(canvas): HTMLElement {\n    const img = canvas.toDataURL('image/png'),\n          imageEle = document.createElement('img');\n    imageEle.setAttribute('src', img);\n    Object.assign(imageEle.style, {\n      position: 'absolute',\n      top: '50%',\n      right: '0',\n      left: '0',\n      margin: '0 auto',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      transform: 'translateY(-50%)'\n    });\n    return imageEle;\n  }\n\n  public hideBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    dialogBackDrop.style.backgroundColor = 'initial';\n  }\n\n  public showBackDrop() {\n    const dialogBackDrop = document.getElementsByClassName('dialogBackDrop')[0] as HTMLElement;\n    if (!dialogBackDrop.getAttribute('data-html2canvas-ignore')) {\n      dialogBackDrop.setAttribute('data-html2canvas-ignore', 'true');\n    }\n    dialogBackDrop.style.backgroundColor = 'rgba(0, 0, 0, .288)';\n  }\n}\n","<div exclude-rect=\"true\" class=\"toolbar\">\n  <div class=\"move-toolbar\" #toggleMove [matTooltip]=\"vars['moveToolbarTip']\" [matTooltipDisabled]=\"disableToolbarTips\">\n    <svg focusable=\"false\" aria-label=\"Drag\" fill=\"#BDBDBD\" height=\"56\" width=\"16\"\n         viewBox=\"-2 2 12 12\">\n      <circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"></circle>\n      <circle cx=\"1.5\" cy=\"7.5\" r=\"1.5\"></circle>\n      <circle cx=\"1.5\" cy=\"13.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"1.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"7.5\" r=\"1.5\"></circle>\n      <circle cx=\"6.5\" cy=\"13.5\" r=\"1.5\"></circle>\n    </svg>\n  </div>\n  <button #highlightBtn (click)=\"toggleHighlight()\" [matTooltip]=\"vars['highlightTip']\"\n          [matTooltipDisabled]=\"disableToolbarTips\" class=\"highlight-toggle\" [ngClass]=\"{'deepen-color': !isSwitch}\">\n    <span class=\"toggle\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\" height=\"36\" width=\"36\"\n           fill=\"#ffd740\">\n        <path d=\"M3 3h18v18H3z\"></path>\n      </svg>\n\n      <svg focusable=\"false\" aria-label=\"\" fill=\"#757575\" viewBox=\"0 0 24 24\"\n           height=\"36\" width=\"36\" [ngClass]=\"{'toggle-decorator': !isSwitch}\" *ngIf=\"!isSwitch\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n    </span>\n  </button>\n  <button (click)=\"toggleHide()\" [matTooltip]=\"vars['hideTip']\" [matTooltipDisabled]=\"disableToolbarTips\"\n          class=\"hide-toggle\" [ngClass]=\"{'deepen-color': isSwitch}\">\n    <span class=\"toggle\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\" height=\"36\" width=\"36\"\n           fill=\"#000\">\n        <path d=\"M3 3h18v18H3z\"></path>\n      </svg>\n      <svg focusable=\"false\" aria-label=\"\" fill=\"#757575\" viewBox=\"0 0 24 24\"\n           height=\"36\" width=\"36\" [ngClass]=\"{'toggle-decorator': isSwitch}\" *ngIf=\"isSwitch\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n    </span>\n  </button>\n  <button mat-button class=\"merge-button\" (click)=\"done()\">{{vars['editDoneLabel']}}</button>\n</div>\n","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-toolbar',\n  templateUrl: './feedback-toolbar.component.html',\n  styleUrls: ['./feedback-toolbar.component.css']\n})\nexport class FeedbackToolbarComponent implements AfterViewInit, OnChanges {\n  @Input()\n  public drawColor: string;\n  @Output()\n  public manipulate = new EventEmitter<string>();\n  public disableToolbarTips = false;\n  @ViewChild('toggleMove', { static: true })\n  private toggleMoveBtn: ElementRef;\n  public isSwitch = false;\n  public isDragging = false;\n  public vars: object = {};\n\n  constructor(public el: ElementRef, private feedbackService: FeedbackService) {\n    this.vars = feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    const elStyle = this.el.nativeElement.style;\n    elStyle.position = 'absolute';\n    elStyle.left = '43%';\n    elStyle.top = '1em';\n    this.addDragListenerOnMoveBtn();\n  }\n\n  public ngOnChanges() {\n    this.isSwitch = this.drawColor !== this.feedbackService.highlightedColor;\n  }\n\n  public done() {\n    this.manipulate.emit('done');\n  }\n\n  public toggleHighlight() {\n    this.isSwitch = false;\n    this.manipulate.emit(this.feedbackService.highlightedColor);\n  }\n\n  public toggleHide() {\n    this.isSwitch = true;\n    this.manipulate.emit(this.feedbackService.hiddenColor);\n  }\n\n  public addDragListenerOnMoveBtn() {\n    const mouseUp = fromEvent(this.toggleMoveBtn.nativeElement, 'mouseup');\n    const mouseMove = fromEvent(document.documentElement, 'mousemove');\n    const mouseDown = fromEvent(this.toggleMoveBtn.nativeElement, 'mousedown');\n    const mouseDrag = mouseDown.pipe(mergeMap((md: MouseEvent) => {\n      this.feedbackService.setIsDraggingToolbar(true);\n      const startX = md.offsetX;\n      const startY = md.offsetY;\n      this.disableToolbarTips = true;\n      this.isDragging = true;\n      // Calculate dif with mousemove until mouseup\n      return mouseMove.pipe(\n        map((mm: MouseEvent) => {\n          mm.preventDefault();\n          return {\n            left: mm.clientX - startX,\n            top: mm.clientY - startY\n          };\n        }),\n        finalize(() => {\n          this.isDragging = false;\n          this.disableToolbarTips = false;\n          this.feedbackService.setIsDraggingToolbar(false);\n        }),\n        takeUntil(mouseUp));\n    }));\n    mouseDrag.subscribe(\n      (pos) => {\n        this.el.nativeElement.style.left = pos.left + 'px';\n        this.el.nativeElement.style.top = pos.top + 'px';\n      });\n  }\n}\n","<div exclude-rect=\"true\" class=\"rect\" [ngStyle]=\"{'left.px': rectangle.startX,\n                              'top.px': rectangle.startY,\n                              'width.px': rectangle.width ,\n                              'height.px': rectangle.height }\"\n    [ngClass]=\"{'highlight': rectangle.color === feedbackService.highlightedColor,\n                'hide': rectangle.color !== feedbackService.highlightedColor,\n                'noHover': noHover}\">\n  <span exclude-rect=\"true\" class=\"close\" *ngIf=\"showCloseTag\" (click)=\"onClose()\">\n    <svg viewBox=\"0 0 1024 1024\"\n         width=\"16\" height=\"16\">\n        <path\n          d=\"M896 224l-96-96-288 288-288-288-96 96 288 288-288 288 96 96 288-288 288 288 96-96-288-288 288-288z\"></path>\n    </svg>\n  </span>\n</div>\n","import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-rectangle',\n  templateUrl: './feedback-rectangle.component.html',\n  styleUrls: ['./feedback-rectangle.component.css']\n})\nexport class FeedbackRectangleComponent {\n  @Input()\n  public rectangle: Rectangle;\n  @Input()\n  public noHover: boolean;\n  @Output()\n  public close = new EventEmitter<boolean>();\n  public showCloseTag: boolean = false;\n\n  constructor(public feedbackService: FeedbackService) {\n  }\n\n  @HostListener('mouseenter')\n  public onMouseEnter(): void {\n    this.showCloseTag = this.noHover === false;\n  }\n\n  @HostListener('mouseleave')\n  public onMouseLeave(): void {\n    this.showCloseTag = false;\n  }\n\n  public onClose(): void {\n    this.close.emit();\n  }\n}\n","<div class=\"dialog\" *ngIf=\"!showToolbar\" data-html2canvas-ignore=\"true\">\n  <div class=\"dialog-title\">\n    <div class=\"title-font\">\n      {{vars['title']}}\n    </div>\n  </div>\n  <div class=\"dialog-content\">\n    <div class=\"description-tips\">\n      <div *ngIf=\"feedback.description==''\">{{vars['placeholder']}}</div>\n    </div>\n    <textarea\n      autofocus\n      class=\"description\"\n      [(ngModel)]=\"feedback.description\"\n    ></textarea>\n  </div>\n  <div class=\"screenshot-checkbox\">\n    <mat-checkbox [(ngModel)]=\"includeScreenshot\" (change)=\"isIncludeScreenshot()\">{{vars['checkboxLabel']}}</mat-checkbox>\n  </div>\n\n  <div #screenshotParent class=\"screenshot-content\" (click)=\"expandDrawingBoard()\" *ngIf=\"includeScreenshot\">\n    <mat-spinner class=\"loading\" [diameter]=\"30\" ></mat-spinner>\n    <div></div>\n    <div class=\"screenshot-tips\" *ngIf=\"!showSpinner\">\n      <svg focusable=\"false\" aria-label=\"\" viewBox=\"0 0 24 24\">\n        <path\n          d=\"M21 17h-2.58l2.51 2.56c-.18.69-.73 1.26-1.41 1.44L17 18.5V21h-2v-6h6v2zM19 7h2v2h-2V7zm2-2h-2V3.08c1.1 0 2 .92 2 1.92zm-6-2h2v2h-2V3zm4 8h2v2h-2v-2zM9 21H7v-2h2v2zM5 9H3V7h2v2zm0-5.92V5H3c0-1 1-1.92 2-1.92zM5 17H3v-2h2v2zM9 5H7V3h2v2zm4 0h-2V3h2v2zm0 16h-2v-2h2v2zm-8-8H3v-2h2v2zm0 8.08C3.9 21.08 3 20 3 19h2v2.08z\"></path>\n      </svg>\n      <span class=\"screenshot-tips-content\">{{vars['editTip']}}</span>\n    </div>\n  </div>\n\n  <mat-dialog-actions class=\"dialog-actions\" align=\"end\">\n    <button mat-button (click)=\"dialogRef.close()\" class=\"action-button\">{{vars['cancelLabel']}}</button>\n    <button mat-button (click)=\"dialogRef.close(true)\" class=\"submit-button action-button\">{{vars['sendLabel']}}</button>\n  </mat-dialog-actions>\n</div>\n<div *ngIf=\"showToolbar\" data-html2canvas-ignore=\"true\">\n  <div class=\"toolbar-tips\" *ngIf=\"showToolbarTips\">\n    {{vars['drawRectTip']}}\n  </div>\n\n  <feedback-toolbar [drawColor]=\"drawColor\" (manipulate)=\"manipulate($event)\"></feedback-toolbar>\n</div>\n<div *ngFor=\"let rectangle of rectangles; index as index\" >\n    <feedback-rectangle [rectangle]=\"rectangle\" [noHover]=\"!showToolbar || isDrawingRect\" (close)=\"closeRect(index)\">\n    </feedback-rectangle>\n</div>\n<canvas id=\"draw-canvas\" class=\"drawCanvas\" [ngClass]=\"{'pointerCursor': !showToolbar}\"></canvas>\n","import { Component, AfterViewInit, ViewChild, ElementRef, ChangeDetectorRef, HostListener } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { takeUntil, finalize, map, mergeMap } from 'rxjs/operators';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Feedback } from '../entity/feedback';\nimport { Rectangle } from '../entity/rectangle';\nimport { FeedbackService } from '../feedback.service';\n\n@Component({\n  selector: 'feedback-dialog',\n  templateUrl: './feedback-dialog.component.html',\n  styleUrls: ['./feedback-dialog.component.css']\n})\nexport class FeedbackDialogComponent implements AfterViewInit {\n  public showToolbar = false;\n  public vars: object = {};\n  public feedback = new Feedback();\n  public includeScreenshot: boolean = true;\n  public showSpinner = true;\n  public screenshotEle: HTMLElement;\n  public drawCanvas: HTMLCanvasElement;\n  public showToolbarTips: boolean = true;\n  @ViewChild('screenshotParent')\n  public screenshotParent: ElementRef;\n  public drawColor: string = this.feedbackService.highlightedColor;\n  public rectangles: Rectangle[] = [];\n  private scrollWidth = document.documentElement.scrollWidth;\n  private scrollHeight = document.documentElement.scrollHeight;\n  private elCouldBeHighlighted = ['button', 'a', 'span', 'em', 'i', 'h1', 'h2', 'h3', 'h4',\n    'h5', 'h6', 'p', 'strong', 'small', 'sub', 'sup', 'b', 'time', 'img',\n    'video', 'input', 'label', 'select', 'textarea', 'article', 'summary', 'section'];\n  // the flag field 'isManuallyDrawRect' to solve conflict between manually draw and auto draw\n  private manuallyDrawRect$: Subscription;\n  private autoDrawRect$: Subscription;\n  public isDrawingRect: boolean = false;\n\n  constructor(public dialogRef: MatDialogRef<FeedbackDialogComponent>,\n              private feedbackService: FeedbackService,\n              private detector: ChangeDetectorRef,\n              private el: ElementRef) {\n    this.feedback = new Feedback();\n    this.feedback.description = '';\n    this.vars = this.feedbackService.initialVariables;\n  }\n\n  public ngAfterViewInit() {\n    this.feedbackService.screenshotCanvas$.subscribe((canvas) => {\n      this.showSpinner = false;\n      this.feedback.screenshot = canvas.toDataURL('image/png');\n      this.screenshotEle = this.feedbackService.getImgEle(canvas);\n      this.appendScreenshot();\n    });\n\n    this.feedbackService.isDraggingToolbar$.subscribe((isDragging) => {\n      if (isDragging) {\n        this.destroyCanvasListeners();\n      } else {\n        this.addCanvasListeners();\n      }\n    });\n\n    this.dialogRef.afterClosed().subscribe((sendNow) => {\n      if (sendNow === true) {\n        this.feedbackService.setFeedback(this.feedback);\n      }\n    });\n    this.feedbackService.showBackDrop();\n  }\n\n  public expandDrawingBoard() {\n    this.showToolbar = true;\n    if (!this.drawCanvas) {\n      this.detector.detectChanges();\n      this.initBackgroundCanvas();\n      this.feedbackService.hideBackDrop();\n    }\n    this.addCanvasListeners();\n    this.el.nativeElement.appendChild(this.drawCanvas);\n    this.feedbackService.hideBackDrop();\n    console.log('expand the board');\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  public onEscapeKeyDownHandler(evt: KeyboardEvent) {\n    this.showToolbar = false;\n    this.includeScreenshot = true;\n    this.detector.detectChanges();\n    this.dialogRef.close('key down esc to close');\n  }\n\n  public manipulate(manipulation: string) {\n    if (manipulation === 'done') {\n      this.showToolbarTips = false;\n      this.showSpinner = true;\n      this.destroyCanvasListeners();\n      this.showToolbar = false;\n      this.detector.detectChanges();\n      this.feedbackService.initScreenshotCanvas();\n    } else {\n      this.startDraw(manipulation);\n    }\n  }\n\n  public startDraw(color: string) {\n    this.drawColor = color;\n  }\n\n  public isIncludeScreenshot() {\n    if (this.includeScreenshot) {\n      this.detector.detectChanges();\n      this.showSpinner = false;\n      this.appendScreenshot();\n      this.feedback.screenshot = this.screenshotEle.getAttribute('src');\n    } else {\n      delete this.feedback['screenshot'];\n      this.showSpinner = true;\n    }\n  }\n\n  private appendScreenshot() {\n    if (this.screenshotParent) { this.screenshotParent.nativeElement.appendChild(this.screenshotEle); }\n  }\n\n  private initBackgroundCanvas() {\n    this.drawCanvas = document.getElementById('draw-canvas') as HTMLCanvasElement;\n    // The canvas to draw, must use this way to initial the height and width\n    this.drawCanvas.style.height = this.scrollHeight + '';\n    this.drawCanvas.style.width = this.scrollWidth + '';\n    this.drawCanvas.height = this.scrollHeight;\n    this.drawCanvas.width = this.scrollWidth;\n    this.drawContainerRect();\n  }\n\n  private drawContainerRect() {\n    const drawContext = this.drawCanvas.getContext('2d'),\n      width = this.scrollWidth,\n      height = this.scrollHeight;\n    drawContext.beginPath();\n    drawContext.fillStyle = 'rgba(0,0,0,0.3)';\n    drawContext.clearRect(0, 0, width, height);\n    drawContext.fillRect(0, 0, width, height); // draw the rectangle\n  }\n\n  private drawRectangle(rect: Rectangle) {\n    const context = this.drawCanvas.getContext('2d');\n    context.lineJoin = 'round';\n    context.beginPath();\n    if (rect.color === this.feedbackService.hiddenColor) {\n      context.fillStyle = 'rgba(31, 31, 31, 0.75)';\n      context.fillRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n    } else {\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      context.lineWidth = 5;\n      context.strokeStyle = rect.color;\n      context.rect(rect.startX, rect.startY, rect.width, rect.height);\n      context.stroke();\n      context.clearRect(rect.startX, rect.startY, rect.width, rect.height);\n      this.rectangles.forEach(tmpRect => {\n        if (tmpRect.color === this.feedbackService.highlightedColor) {\n          context.clearRect(tmpRect.startX, tmpRect.startY, tmpRect.width, tmpRect.height);\n        }\n      });\n    }\n  }\n\n  private addCanvasListeners(): void {\n    const mouseUp = fromEvent(document.documentElement, 'mouseup'),\n          mouseMove = fromEvent(document.documentElement, 'mousemove'),\n          mouseDown = fromEvent(document.documentElement, 'mousedown'),\n          scroll = fromEvent(window, 'scroll');\n\n    this.manuallyDrawRect(mouseDown, mouseMove, mouseUp);\n    this.autoDrawRect(mouseMove);\n    this.changeRectPosition(scroll);\n  }\n\n  private changeRectPosition(scroll: Observable<Event>) {\n    scroll.subscribe(\n      event => {\n        const currentWindowScrollX = window.scrollX,\n              currentWindowScrollY = window.scrollY;\n        this.rectangles.forEach(rect => {\n          rect.startY = rect.startY - (currentWindowScrollY - rect.windowScrollY);\n          rect.startX = rect.startX - (currentWindowScrollX - rect.windowScrollX);\n          rect.windowScrollY = currentWindowScrollY;\n          rect.windowScrollX = currentWindowScrollX;\n        });\n        this.drawPersistCanvasRectangles();\n      },\n      error => console.error(error)\n    );\n  }\n\n  private destroyCanvasListeners(): void {\n    if (this.manuallyDrawRect$) { this.manuallyDrawRect$.unsubscribe(); }\n    if (this.autoDrawRect$) { this.autoDrawRect$.unsubscribe(); }\n  }\n\n  private manuallyDrawRect(mouseDown: Observable<Event>, mouseMove: Observable<Event>, mouseUp: Observable<Event>): void {\n    const mouseDrag = mouseDown.pipe(mergeMap((mouseDownEvent: MouseEvent) => {\n      if (this.showToolbarTips) { this.showToolbarTips = false; }\n      this.autoDrawRect$.unsubscribe();\n      this.isDrawingRect = true;\n\n      const newRectangle = new Rectangle();\n      newRectangle.startX = mouseDownEvent.clientX;\n      newRectangle.startY = mouseDownEvent.clientY;\n      newRectangle.color = this.drawColor;\n\n      return mouseMove.pipe(\n        map((mouseMoveEvent: MouseEvent) => {\n          newRectangle.width = mouseMoveEvent.clientX - mouseDownEvent.clientX;\n          newRectangle.height = mouseMoveEvent.clientY - mouseDownEvent.clientY;\n          return newRectangle;\n        }),\n        finalize(() => {\n          // click to draw rectangle\n          if (newRectangle.width === undefined || newRectangle.height === undefined ||\n            newRectangle.width === 0 || newRectangle.height === 0) {\n            const rect = this.drawTempCanvasRectangle(mouseDownEvent);\n            if (rect) { this.rectangles.push(rect); }\n          } else {\n          // drag to draw rectangle\n            if (newRectangle.height < 0) {\n              newRectangle.startY = newRectangle.startY + newRectangle.height;\n              newRectangle.height = Math.abs(newRectangle.height);\n            }\n            if (newRectangle.width < 0) {\n              newRectangle.startX = newRectangle.startX + newRectangle.width;\n              newRectangle.width = Math.abs(newRectangle.width);\n            }\n            this.rectangles.push(newRectangle);\n          }\n          this.drawPersistCanvasRectangles();\n          this.autoDrawRect(mouseMove);\n          this.isDrawingRect = false;\n        }),\n        takeUntil(mouseUp));\n    }));\n\n    this.manuallyDrawRect$ = mouseDrag.subscribe(\n      (rec) => {\n        this.drawPersistCanvasRectangles();\n        this.drawRectangle(rec);\n      }\n    );\n  }\n\n  private autoDrawRect(mouseMove: Observable<Event>): void {\n    this.autoDrawRect$ = mouseMove.subscribe({\n      next: (mouseMoveEvent: MouseEvent) => {\n        this.drawPersistCanvasRectangles();\n        this.drawTempCanvasRectangle(mouseMoveEvent);\n      },\n      error: err => console.error('something wrong occurred: ' + err),\n    });\n  }\n\n  private drawPersistCanvasRectangles() {\n    this.drawContainerRect();\n    this.rectangles.forEach(tmpRect => {\n      this.drawRectangle(tmpRect);\n    });\n  }\n\n  private drawTempCanvasRectangle(event: MouseEvent) {\n    let rectangle: Rectangle = null;\n    const clientX = event.clientX,\n          clientY = event.clientY,\n          els = document.elementsFromPoint(clientX, clientY),\n          el = els[2];\n    if ((!this.isExcludeRect(els)) && el && this.elCouldBeHighlighted.indexOf(el.nodeName.toLowerCase()) > -1) {\n      rectangle = new Rectangle();\n      const rect = el.getBoundingClientRect();\n      this.drawCanvas.style.cursor = 'pointer';\n\n      Object.assign(rectangle, {\n        startX: rect.left,\n        startY: rect.top,\n        width: rect.width,\n        height: rect.height,\n        color: this.drawColor\n      });\n      this.drawRectangle(rectangle);\n    } else {\n      this.drawCanvas.style.cursor = 'crosshair';\n    }\n    return rectangle;\n  }\n\n  public closeRect(index: number) {\n    this.rectangles.splice(index, 1);\n    this.drawPersistCanvasRectangles();\n  }\n\n  private isExcludeRect(elements: Element[]): boolean {\n    const result = elements.some( el => {\n      return el.getAttribute('exclude-rect') === 'true';\n    });\n    return result;\n  }\n}\n","import { Directive, HostListener, EventEmitter, Output, Input, OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Feedback } from './entity/feedback';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackService } from './feedback.service';\n\n@Directive({selector: '[feedback]'})\nexport class FeedbackDirective implements OnInit {\n  private overlay: Overlay;\n  @Input() title: string = 'Send feedback';\n  @Input() placeholder: string = 'Describe your issue or share your ideas';\n  @Input() editTip = 'Click to highlight or hide info';\n  @Input() checkboxLabel = 'Include screenshot';\n  @Input() cancelLabel = 'CANCEL';\n  @Input() sendLabel = 'SEND';\n  @Input() moveToolbarTip = 'move toolbar';\n  @Input() drawRectTip = 'Draw using yellow to highlight issues or black to hide sensitive info';\n  @Input() highlightTip = 'highlight issues';\n  @Input() hideTip = 'hide sensitive info';\n  @Input() editDoneLabel = 'DONE';\n  @Output() public send = new EventEmitter<Feedback>();\n\n  public constructor(private dialogRef: MatDialog, private feedbackService: FeedbackService, overlay: Overlay) {\n    this.feedbackService.feedback$.subscribe(\n      (feedback) => {\n        this.send.emit(feedback);\n      }\n    );\n    this.overlay = overlay;\n  }\n\n  @HostListener('click')\n  public onClick() {\n    this.openFeedbackDialog();\n  }\n\n  public openFeedbackDialog() {\n    this.feedbackService.initScreenshotCanvas();\n    this.dialogRef.open(FeedbackDialogComponent, {\n      panelClass: 'feedbackDialog',\n      backdropClass: 'dialogBackDrop',\n      disableClose: true,\n      height: 'auto',\n      width: 'auto',\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n  }\n\n  ngOnInit(): void {\n    this.feedbackService.initialVariables = {\n      title: this.title,\n      placeholder: this.placeholder,\n      editTip: this.editTip,\n      checkboxLabel: this.checkboxLabel,\n      cancelLabel: this.cancelLabel,\n      sendLabel: this.sendLabel,\n      moveToolbarTip: this.moveToolbarTip,\n      drawRectTip: this.drawRectTip,\n      highlightTip: this.highlightTip,\n      hideTip: this.hideTip,\n      editDoneLabel: this.editDoneLabel\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FeedbackDialogComponent } from './feedback-dialog/feedback-dialog.component';\nimport { FeedbackToolbarComponent } from './feedback-toolbar/feedback-toolbar.component';\nimport { FeedbackRectangleComponent } from './feedback-rectangle/feedback-rectangle.component';\nimport { FeedbackService } from './feedback.service';\nimport { FeedbackDirective } from './feedback.directive';\n\n@NgModule({\n  declarations: [\n    FeedbackDialogComponent,\n    FeedbackToolbarComponent,\n    FeedbackRectangleComponent,\n    FeedbackDirective\n  ],\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatTooltipModule,\n    CommonModule,\n    FormsModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    FeedbackDirective\n  ],\n  entryComponents: [\n    FeedbackDialogComponent\n  ],\n  providers: [\n    FeedbackService\n  ]\n})\nexport class FeedbackModule {\n}\n"]}